<?php

namespace mgen;

class ModelFile extends CommonFile
{
    public function generate()
    {
        $content = ["<?php", "/*", " * This file was generated by modelGen", " * VERSION: {$this->modelHash}", " * https://github.com/alexshadie/modelGen", " */", ""];
        if ($this->namespace) {
            $content[] = "namespace {$this->namespace};";
            $content[] = "";
        }

        $content[] = "class {$this->name} \n{";
        if ($this->useCoreUtils) {
            $content[] = S . "use \\mgen\\ext\\ToArrayTrait;";
            $content[] = "";
        }
        $content[] = $this->buildFields();
        $content[] = $this->buildCtor();
        $content[] = "";
        $content[] = $this->getBuild();
        $content[] = $this->getGetters();
        $content[] = $this->getEquals();

        $content[] = "}";
        $content[] = "";

        return join("\n", $content);
    }

    protected function buildFields()
    {
        $phpDocs = [];
        $fields = [];
        foreach ($this->fields as $field => $type) {
            $t = new Type($type);
            $phpDoc = S . "/**\n     * @var {$t->getPhpDocType()}\n";
            if (in_array($field, $this->exports)) {
                $phpDoc .= S . " * @@export\n";
            }
            $phpDoc .= S . " */";
            $phpDocs[] = $phpDoc;
            $fields[] = S . "private \${$field};";
        }

        $result = [];
        foreach ($phpDocs as $k => $v) {
            $result[] = $phpDocs[$k];
            $result[] = $fields[$k];
            $result[] = "";
        }

        return join("\n", $result);
    }

    protected function buildCtor()
    {
        $ctorArgs = [];
        $phpDocs = [];
        $assign = [];
        foreach ($this->fields as $field => $type) {
            $t = new Type($type);
            $phpDoc = S . "/** \n     * @var {$t->getPhpDocType()}\n";
            if (in_array($field, $this->exports)) {
                $phpDoc .= S . " * @@export\n";
            }
            $phpDoc .= S . " */";
            $phpDocs[] = $phpDoc;

            $ctorArgs[] = "{$t->getSourceType()} \${$field}";
            $assign[] = $t->getCtorAssign($field);
        }

        return
            S . "public function __construct(" . join(', ', $ctorArgs) . ")\n" .
            S . "{\n" .
            join("\n", $assign) . "\n" .
            S . "}";
    }

    public function getBuild()
    {
        return
            S . "public static function build(): {$this->name}Builder\n" .
            S . "{\n" .
            S . S . "return new {$this->name}Builder();\n" .
            S . "}\n";
    }

    public function getEquals()
    {
        $comparison = [];

        foreach ($this->fields as $field => $type) {
            $comparison[] = S . S . S . "\$this->get" . ucfirst($field) . "() === \$src->get" . ucfirst($field) . "() ";
        }
        return
            "\n" .
            S . "public function equals(?{$this->name} \$src): bool\n" .
            S . "{\n" .
            S . S . "if (is_null(\$src)) {\n" .
            S . S . S . "return false;\n" .
            S . S . "}\n" .
            S . S . "return\n" . join("&&\n", $comparison) . "\n" .
            S . S . ";\n" .
            S . "}";
    }

    public function getGetters()
    {
        $getters = [];
        foreach ($this->fields as $field => $type) {
            $t = new Type($type);
            $getters[] = $t->getter($field);
        }

        return join("\n\n", $getters);
    }

}